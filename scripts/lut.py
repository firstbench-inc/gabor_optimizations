import numpy as np


coeff = {
    45: [
        "111101111110111011",
        "000010010010101111",
        "000111101011010011",
        "001011100111100111",
        "001111000000001010",
    ],
    90: [
        "111101111110111010",
        "000010010010110000",
        "000111101011010100",
        "001011100111100111",
        "001111001010110011",
    ],
    135: [
        "001100100111100100",
        "000101110110110000",
        "111110000100100110",
        "111000100011000111",
        "001111101001010000",
    ],
    180: ["111111010110011000", "001010000101110000", "001111011010101101"],
}


# arr_45[] = np.zeros((5,5))

# arr_45[0] = coeff[45][0]
# arr_45[1] = arr_45[5]= coeff[45][1]
# arr_45[2] = arr_45[10]= arr_45[6] = coeff[45][2]
# arr_45[3]= arr_45[4] = arr_45[9]= arr_45[7]= coeff[45][2]
# arr_45[12] = arr_45[8]= coeff[45][4]


def dec_to_bin(num, bit_len=18):
    num_bin = bin(num)[2:]  # Convert to binary and remove '0b' prefix
    if num < 0:
        num = (1 << bit_len) + num
    return format(num, f"0{bit_len}b")


arr = [-8262, 9392, 31444, 47591, 62131]
arr1 = [51684, 23984, -7898, -30521, 64080]
arr2 = [-2664, 41328, 63149]

for i in range(len(arr)):
    print(f"coeff90[{i}] = 18'b{dec_to_bin(arr[i], 18)};")

for i in range(len(arr1)):
    print(f"coeff135[{i}] = 18'b{dec_to_bin(arr1[i], 18)};")


for i in range(len(arr2)):
    print(f"coeff180[{i}] = 18'b{dec_to_bin(arr2[i], 18)};")
